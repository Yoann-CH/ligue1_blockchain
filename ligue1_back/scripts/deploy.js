const { ethers } = require("hardhat");

async function main() {
  console.log("üöÄ D√©ploiement du contrat Ligue1Vote...");

  // R√©cup√©rer le signataire par d√©faut
  const [deployer] = await ethers.getSigners();
  console.log("üìù D√©ploiement avec le compte:", deployer.address);

  // V√©rifier le solde
  const balance = await ethers.provider.getBalance(deployer.address);
  console.log("üí∞ Solde du compte:", ethers.formatEther(balance), "ETH");

  // D√©ployer le contrat
  const Ligue1Vote = await ethers.getContractFactory("Ligue1Vote");
  const ligue1Vote = await Ligue1Vote.deploy();

  await ligue1Vote.waitForDeployment();
  const contractAddress = await ligue1Vote.getAddress();

  console.log("‚úÖ Contrat Ligue1Vote d√©ploy√© √† l'adresse:", contractAddress);

  // V√©rifier que le contrat fonctionne
  const clubCount = await ligue1Vote.clubCount();
  console.log("üèÜ Nombre de clubs initialis√©s:", clubCount.toString());

  // Afficher quelques clubs pour v√©rification
  const psg = await ligue1Vote.getClub(1);
  const om = await ligue1Vote.getClub(2);
  
  console.log("‚öΩ Premier club:", psg.name);
  console.log("‚öΩ Deuxi√®me club:", om.name);

  // Sauvegarder l'adresse du contrat pour l'utiliser dans le backend
  const fs = require('fs');
  const contractInfo = {
    address: contractAddress,
    deployer: deployer.address,
    network: (await ethers.provider.getNetwork()).name,
    deployedAt: new Date().toISOString()
  };

  fs.writeFileSync(
    './deployed-contract.json',
    JSON.stringify(contractInfo, null, 2)
  );

  console.log("üìÑ Informations du contrat sauvegard√©es dans deployed-contract.json");
  
  return contractAddress;
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement:", error);
    process.exit(1);
  }); 